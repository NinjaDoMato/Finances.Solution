@model Finances.Database.Entities.Cost

@{
    ViewData["Title"] = "Edit";
}

<h1>Editar</h1>

<h4>Custo Fixo</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Amount" class="control-label"></label>
                <input asp-for="Amount" class="form-control" />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
           <div class="form-group">
                <label asp-for="Type" class="control-label"></label>
                <select asp-for="Type" class="form-control">
                    <option value="0">Diário</option>
                    <option value="1">Semanal</option>
                    <option value="2">Mensal</option>
                    <option value="3">Anual</option>
                </select>                
            </div>
            <div class="form-group">
                <label asp-for="ReserveId" class="control-label"></label>
                <select asp-for="ReserveId" class="form-control" asp-items="ViewBag.Reserves">
                    <option value="">Selecione uma reserva (opcional)</option>
                </select>
                <span asp-validation-for="ReserveId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DanielPercentage" class="control-label"></label>
                <input id="percentageDaniel" type="number" asp-for="DanielPercentage" class="form-control" value=@Math.Round(Model.DanielPercentage, 2)/>
                <span asp-validation-for="DanielPercentage" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CassiaPercentage" class="control-label"></label>
                <input id="percentageCassia" type="number" asp-for="CassiaPercentage" class="form-control" value=@Math.Round(Model.CassiaPercentage, 2)/>
                <span asp-validation-for="CassiaPercentage" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DateCreated" class="control-label"></label>
                <input asp-for="DateCreated" class="form-control" disabled />
                <span asp-validation-for="DateCreated" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastUpdate" class="control-label"></label>
                <input asp-for="LastUpdate" class="form-control" disabled />
                <span asp-validation-for="LastUpdate" class="text-danger"></span>
            </div>

            <div class="form-group d-flex">
                <a class="btn btn-secondary mr-2" asp-action="Index">Cancelar</a>
                <input type="submit" value="Atualizar Custo Fixo" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-md-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Pagamentos</h6>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label class="control-label">Adicionar Pagamento</label>
                    <div class="d-flex">
                        <input type="datetime-local" class="form-control ml-2" id="paymentDate" />
                        <input type="number" class="form-control ml-2" id="paymentAmount" value="0.00" />
                        <span class="text-danger"></span>
                        <button type="button" class="btn btn-primary ml-2" id="addReserve">Salvar</button>
                    </div>
                </div>

                <div class="table-responsive mt-4">
                    <table class="table table-bordered" id="costPayments">
                        <thead>
                            <tr>
                                <th>Data de pagamento</th>
                                <th>Valor</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < Model.Payments.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Model.Payments[i].DatePaid.ToString("dd/MM/yyyy HH:mm")
                                    </td>
                                    <td>
                                        @Html.DisplayFor(model => model.Payments[i].PaidAmount)
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm delete-payment" data-payment-id="@Model.Payments[i].Id">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="vendor/jquery/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            // Definir data atual como padrão
            var now = new Date();
            var year = now.getFullYear();
            var month = String(now.getMonth() + 1).padStart(2, '0');
            var day = String(now.getDate()).padStart(2, '0');
            var hours = String(now.getHours()).padStart(2, '0');
            var minutes = String(now.getMinutes()).padStart(2, '0');
            
            var formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
            $("#paymentDate").val(formattedDateTime);

            // Definir valor do custo fixo como padrão
            $("#paymentAmount").val(@Model.Amount);

            $("#percentageDaniel").change(function () {
                console.log($("#percentageDaniel").val());
                var diff = 100 - $("#percentageDaniel").val();
                console.log(diff);

                $("#percentageCassia").val(diff);
            });

            $("#percentageCassia").change(function () {
                var diff = 100 - $("#percentageCassia").val();
                $("#percentageDaniel").val(diff);
            });

            // Handle adding a selected reserve
            $("#addReserve").click(function () {
                var id = "@Model.Id.ToString()";
                var paidAmount = $("#paymentAmount").val();
                var paidDate = $("#paymentDate").val();

                if (paidAmount !== "" && paidDate != "") {
                    $.ajax({
                        url: "/Costs/" +  id + "/Payment",
                        method: "POST",
                        data: {
                            paidAmount: paidAmount,
                            paidDate: paidDate
                        },
                        success: function () {
                            // Reload the page after adding the payment
                            location.reload();
                        },
                        error: function () {
                            // Handle the error if needed
                        }
                    });
                }
            });

            // Handle deleting a payment
            $(".delete-payment").click(function () {
                if (confirm("Tem certeza que deseja excluir este pagamento?")) {
                    var paymentId = $(this).data("payment-id");

                    $.ajax({
                        url: '@Url.Action("DeletePayment", "Costs")/' + paymentId,
                        method: "DELETE",
                        success: function () {
                            // Mostrar notificação de sucesso
                            toastr.success('Pagamento excluído com sucesso!');
                            
                            // Aguardar a notificação ser exibida antes de recarregar
                            setTimeout(function() {
                                location.reload();
                            }, 1000);
                        },
                        error: function (xhr, status, error) {
                            console.error("Erro ao excluir pagamento:", error);
                            console.error("Status:", status);
                            console.error("Response:", xhr.responseText);
                            toastr.error('Erro ao excluir o pagamento. Tente novamente.');
                        }
                    });
                }
            });
        });
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
