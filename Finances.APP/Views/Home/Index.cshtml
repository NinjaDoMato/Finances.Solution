@{
    ViewData["Title"] = "Home Page";
}


<div class="text-center">
    <!-- Area Chart -->
    <div class="row">
        <div class="col-xl-6 col-lg-6 mb-4">
            <div class="card shadow mb-4 h-100">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Capital Acumulado</h6>
                </div>
                <div class="card-body d-flex align-items-center justify-content-center" style="height: 400px;">
                    <div class="chart-bar w-100" style="height: 350px; max-width: 700px;">
                        <canvas id="chartCapitalAcumulado" style="max-width: 100%; max-height: 350px;"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-2 col-lg-3 mb-4">
            <div class="card shadow mb-4 h-100">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Carteira de Investimentos</h6>
                </div>
                <div class="card-body d-flex flex-column align-items-center justify-content-center" style="height: 400px;">
                    <canvas id="donutInvestments" width="180" height="180" style="max-width: 180px; max-height: 180px;"></canvas>
                </div>
            </div>
        </div>
        <div class="col-xl-4 col-lg-5 mb-4">
            <div class="card shadow mb-4 h-100">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Próximos investimentos</h6>
                </div>
                <div class="card-body p-0" style="height: 400px; overflow-y: auto;">
                    <ul id="upcoming-investments-list" class="list-group list-group-flush" style="border-radius: 0.35rem;">
                        <li class="list-group-item text-center text-secondary">Carregando...</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
          rel="stylesheet">

    <!-- Custom styles for this template-->
    <link href="css/sb-admin-2.min.css" rel="stylesheet">

    @section Scripts {
        <!-- Page level plugins -->
        <script src="vendor/chart.js/Chart.min.js"></script>

        <!-- Page level custom scripts -->
        <script>
            function getChartColors() {
                const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
                return {
                    backgroundColor: isDark ? '#23272b' : '#fff',
                    gridColor: isDark ? 'rgba(255,255,255,0.15)' : 'rgba(0,0,0,0.1)',
                    zeroLineColor: isDark ? 'rgba(255,255,255,0.3)' : 'rgba(0,0,0,0.25)',
                    tooltipBg: isDark ? '#23272b' : '#fff',
                    tooltipTitle: isDark ? '#fff' : '#6e707e',
                    tooltipBody: isDark ? '#fff' : '#858796',
                    tooltipBorder: isDark ? '#444' : '#dddfeb',
                };
            }

            function formatCurrency(amount) {
                const formatter = new Intl.NumberFormat('pt-BR', {
                    style: 'currency',
                    currency: 'BRL'
                });
                return formatter.format(amount);
            }

            function formatDate(dateStr) {
                const date = new Date(dateStr);
                return date.toLocaleDateString('pt-BR');
            }

            let chartMontinhosInstance = null;
            let chartMontinhosData = null;
            let chartMontinhosMax = 0;

            function renderMontinhosChart(data) {
                const ctx = document.getElementById("chartMontinhos");
                const colors = getChartColors();
                ctx.style.backgroundColor = colors.backgroundColor;

                if (chartMontinhosInstance) {
                    chartMontinhosInstance.destroy();
                }

                let dataset = [];
                let maxAmount = 0;
                data.reserves.forEach((element) => {
                    dataset.push({
                        label: element.reserveName,
                        borderColor: element.reserveDisplayColor,
                        data: element.amountByMonth,
                        backgroundColor: "rgba(255, 255, 255, 0)",
                    });
                    if (maxAmount < Math.max(...element.amountByMonth)) {
                        maxAmount = Math.ceil(Math.max(...element.amountByMonth));
                    }
                });
                chartMontinhosMax = maxAmount;

                chartMontinhosInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.labels,
                        datasets: dataset,
                    },
                    options: {
                        maintainAspectRatio: false,
                        layout: {
                            padding: { left: 10, right: 25, top: 25, bottom: 0 },
                        },
                        scales: {
                            xAxes: [{
                                time: { unit: 'month' },
                                gridLines: {
                                    display: true,
                                    drawBorder: false,
                                    color: colors.gridColor,
                                },
                                ticks: { maxTicksLimit: 10 },
                                maxBarThickness: 20,
                            }],
                            yAxes: [{
                                ticks: {
                                    min: 0,
                                    max: maxAmount,
                                    maxTicksLimit: 5,
                                    padding: 15,
                                    callback: function (value) { return formatCurrency(value); }
                                },
                                gridLines: {
                                    color: colors.gridColor,
                                    zeroLineColor: colors.zeroLineColor,
                                    drawBorder: false,
                                    borderDash: [2],
                                    zeroLineBorderDash: [2]
                                }
                            }],
                        },
                        legend: { display: false },
                        tooltips: {
                            titleMarginBottom: 10,
                            titleFontColor: colors.tooltipTitle,
                            titleFontSize: 14,
                            backgroundColor: colors.tooltipBg,
                            bodyFontColor: colors.tooltipBody,
                            borderColor: colors.tooltipBorder,
                            borderWidth: 1,
                            xPadding: 15,
                            yPadding: 15,
                            displayColors: true,
                            caretPadding: 10,
                            callbacks: {
                                label: function (tooltipItem, chart) {
                                    var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                                    return datasetLabel + ': ' + formatCurrency(tooltipItem.yLabel);
                                }
                            }
                        },
                    }
                });
            }

            function fetchAndRenderMontinhosChart() {
                // AJAX puro sem jQuery
                var xhr = new XMLHttpRequest();
                xhr.open('GET', '/Reserves/AmountByMonth', true);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                            var data = JSON.parse(xhr.responseText);
                            chartMontinhosData = data;
                            renderMontinhosChart(data);
                        } else {
                            console.log('Erro ao buscar dados do gráfico:', xhr.statusText);
                        }
                    }
                };
                xhr.send();
            }

            function loadUpcomingInvestments() {
                const list = document.getElementById('upcoming-investments-list');
                list.innerHTML = '<li class="list-group-item text-center text-secondary">Carregando...</li>';
                fetch('/Investments/Upcoming')
                    .then(res => res.json())
                    .then(data => {
                        if (!data || data.length === 0) {
                            list.innerHTML = '<li class="list-group-item text-center text-secondary">Nenhum investimento próximo do vencimento.</li>';
                            return;
                        }
                        list.innerHTML = '';
                        data.forEach(item => {
                            const li = document.createElement('li');
                            li.className = 'list-group-item investment-item';
                            li.style.cursor = 'pointer';
                            
                            const now = new Date();
                            const endDate = new Date(item.endDate);
                            const isExpired = endDate < now;
                            const isCurrentMonth = endDate.getMonth() === now.getMonth() && endDate.getFullYear() === now.getFullYear();
                            
                            let badgeClass = 'badge-success';
                            if (isExpired) {
                                badgeClass = 'badge-danger';
                            } else if (isCurrentMonth) {
                                badgeClass = 'badge-warning';
                            }
                            
                            li.innerHTML = `
                                <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center">
                                    <div>
                                        <span class="font-weight-bold">${item.name}</span><br/>
                                        <span class="text-secondary" style="font-size:0.9em;">${formatCurrency(item.currentAmount)}</span>
                                    </div>
                                    <div class="mt-2 mt-md-0">
                                        <span class="badge badge-pill ${badgeClass}">${formatDate(item.endDate)}</span>
                                    </div>
                                </div>
                            `;
                            li.onclick = () => window.location.href = `/Investments/Edit/${item.id}`;
                            list.appendChild(li);
                        });
                    })
                    .catch(() => {
                        list.innerHTML = '<li class="list-group-item text-center text-danger">Erro ao carregar investimentos.</li>';
                    });
            }

            let donutChartInstance = null;
            function getDonutColors() {
                const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
                return isDark
                    ? ["#3b82f6", "#f59e0b", "#10b981", "#6366f1", "#f43f5e", "#f472b6"]
                    : ["#4e73df", "#f6c23e", "#1cc88a", "#36b9cc", "#e74a3b", "#858796"];
            }
            function loadDonutChart() {
                fetch('/Investments/TypesDistribution')
                    .then(res => res.json())
                    .then(data => {
                        const ctx = document.getElementById('donutInvestments');
                        if (donutChartInstance) donutChartInstance.destroy();
                        const labels = data.map(x => x.type);
                        const values = data.map(x => x.count);
                        const colors = getDonutColors();
                        donutChartInstance = new Chart(ctx, {
                            type: 'doughnut',
                            data: {
                                labels: labels,
                                datasets: [{
                                    data: values,
                                    backgroundColor: colors,
                                    borderColor: 'rgba(0,0,0,0.05)',
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: false,
                                plugins: {
                                    legend: {
                                        display: true,
                                        position: 'bottom',
                                        labels: {
                                            color: document.documentElement.getAttribute('data-theme') === 'dark' ? '#fff' : '#222'
                                        }
                                    }
                                },
                                tooltips: {
                                    backgroundColor: document.documentElement.getAttribute('data-theme') === 'dark' ? '#23272b' : '#fff',
                                    bodyFontColor: document.documentElement.getAttribute('data-theme') === 'dark' ? '#fff' : '#858796',
                                    borderColor: document.documentElement.getAttribute('data-theme') === 'dark' ? '#444' : '#dddfeb',
                                    borderWidth: 1,
                                }
                            }
                        });
                    });
            }

            function renderCapitalAcumuladoChart(data) {
                const ctx = document.getElementById('chartCapitalAcumulado');
                if (window.capitalAcumuladoChart) window.capitalAcumuladoChart.destroy();
                window.capitalAcumuladoChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.labels,
                        datasets: [
                            {
                                label: 'Investido',
                                data: data.investedByMonth,
                                backgroundColor: '#3b82f6',
                                stack: 'Stack 0',
                                barPercentage: 0.5,
                                categoryPercentage: 0.6
                            },
                            {
                                label: 'Disponível',
                                data: data.availableByMonth,
                                backgroundColor: '#f59e0b',
                                stack: 'Stack 0',
                                barPercentage: 0.5,
                                categoryPercentage: 0.6
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'bottom',
                                labels: {
                                    color: document.documentElement.getAttribute('data-theme') === 'dark' ? '#fff' : '#858796'
                                }
                            },
                            title: {
                                display: false
                            }
                        },
                        scales: {
                            x: {
                                stacked: true,
                                grid: {
                                    color: document.documentElement.getAttribute('data-theme') === 'dark' ? 'rgba(255,255,255,0.15)' : 'rgba(0,0,0,0.1)'
                                },
                                ticks: {
                                    color: document.documentElement.getAttribute('data-theme') === 'dark' ? '#fff' : '#858796'
                                }
                            },
                            y: {
                                stacked: true,
                                grid: {
                                    color: document.documentElement.getAttribute('data-theme') === 'dark' ? 'rgba(255,255,255,0.15)' : 'rgba(0,0,0,0.1)'
                                },
                                ticks: {
                                    color: document.documentElement.getAttribute('data-theme') === 'dark' ? '#fff' : '#858796'
                                }
                            }
                        }
                    }
                });
            }

            function loadCapitalAcumuladoChart() {
                fetch('/Reserves/CapitalAcumuladoPorMes')
                    .then(res => res.json())
                    .then(data => {
                        renderCapitalAcumuladoChart(data);
                    });
            }

            // Executa apenas quando o DOM estiver pronto
            document.addEventListener('DOMContentLoaded', function () {
                fetchAndRenderMontinhosChart();
                loadUpcomingInvestments();
                loadDonutChart();
                loadCapitalAcumuladoChart();

                // Atualiza o gráfico ao trocar o tema
                const observer = new MutationObserver(function (mutations) {
                    mutations.forEach(function (mutation) {
                        if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
                            if (chartMontinhosData) {
                                renderMontinhosChart(chartMontinhosData);
                            }
                            loadUpcomingInvestments();
                            loadDonutChart();
                            loadCapitalAcumuladoChart();
                        }
                    });
                });
                observer.observe(document.documentElement, { attributes: true });
            });
        </script>
        <style>
            [data-theme="dark"] .investment-item {
                background-color: #23272b !important;
                color: #fff !important;
                border-color: #333 !important;
            }
            [data-theme="dark"] .investment-item .text-secondary {
                color: #b8b8b8 !important;
            }
            [data-theme="dark"] .investment-item .badge-warning {
                background-color: #f59e0b !important;
                color: #23272b !important;
            }
            .investment-item:hover {
                background-color: #e3e6f0 !important;
            }
            [data-theme="dark"] .investment-item:hover {
                background-color: #333 !important;
            }
        </style>
    }
